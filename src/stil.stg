program(code) ::=  <<
.source Test.j
.class public HelloWorld
    .super java/lang/Object

    ;
    ; standard initializer (calls java.lang.Object's initializer)
    ;
    .method public \<init\>()V
       aload_0
       invokenonvirtual java/lang/Object/\<init\>()V
       return
    .end method

    ;
    ; main() - prints out Hello World
    ;
    .method public static main([Ljava/lang/String;)V
      .limit stack 10 // TODO: Dynamisch bepalen
      .limit locals 2 // TODO: Dynamisch bepalen
      // CODE HERE
      <code>
      ; done
      return
    .end method
>>


print(expression) ::= <<
; push System.out onto the stack
getstatic java/lang/System/out Ljava/io/PrintStream;

<expression>

; call the PrintStream.println() method.
invokevirtual java/io/PrintStream/println(I;)V // use type
>>

int_literal(literal) ::= "bipush\n<literal>;push literal value"