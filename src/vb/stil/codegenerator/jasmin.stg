group stil;

type_map ::= [
  "int"  : "I",
  "bool" : "Z",
  "char" : "C"
]

type_scanner_map ::= [
  "int"  : "Int",
  "bool" : "Boolean",
  "char" : ""
]

type_scan_templ ::= [
  "int"  : "scan_int",
  "bool" : "scan_bool",
  "char" : "scan_char"
]

bool_map ::= [
  "true"  : "1",
  "false" : "0"
]

logic_operators ::= [
  "lt"  : "if_icmplt",
  "lte" : "if_icmple",
  "gt"  : "if_icmpgt",
  "gte" : "if_icmpge",
  "eq"  : "if_icmpeq",
  "neq" : "if_icmpne"
]

binary_operators ::= [
  "divide":   "idiv",
  "minus":    "isub",
  "or":       "ior",
  "modulo":   "irem",
  "multiply": "imul",
  "plus":     "iadd",
  "and":      "iand"
]


program(maxStackDepth, maxLocals, instructions) ::= <<
  .class public Program
  .super java/lang/Object
  .method public \<init>()V
    aload_0
    invokenonvirtual java/lang/Object/\<init>()V
    return
  .end method

  .method public static main([Ljava/lang/String;)V
    .limit stack 102
    .limit locals 100
    <instructions ; separator="\npop\n">
    pop
    return
  .end method
>>

compound_expression(instructions) ::= <<
<instructions ; separator="\npop\n">
>>


becomes(varnum, expression, id, type) ::= <<
<expression>
dup
istore <varnum> ; <type> <id>
>>


idOperand(id, varnum, type) ::= <<
iload <varnum> ; <type> <id>
>>


boolLiteral(value) ::= <<
bipush <bool_map.(value)>
>>

charLiteral(value) ::= <<
bipush <value>
>>

intLiteral(value) ::= <<
bipush <value>
>>

not(expr, label1, label2) ::= <<
<expr>
ifeq L<label1>
bipush 0
goto L<label2>
L<label1>:
bipush 1 
L<label2>:
>>

unary_minus(expr) ::= <<
<expr>
ineg
>>

unary_plus(expr) ::= <<
<expr>
>>

comparison(expr1, expr2, label1, label2, operator) ::= <<
<expr1>
<expr2>
<logic_operators.(operator)> L<label1>
bipush 0
goto L<label2>
L<label1>:
bipush 1 
L<label2>:
>>

binary_operator(expr1,expr2,operator) ::= <<
<expr1>
<expr2>
<binary_operators.(operator)>
>>


print(expression,type) ::= <<
<expression>
dup
getstatic java/lang/System/out Ljava/io/PrintStream; 
swap
invokevirtual java/io/PrintStream/println(<type_map.(type)>)V
>>

printMultiple(statements) ::= <<
<statements ; separator="\npop\n">
>>

scan_int() ::= <<
invokevirtual java/util/Scanner/nextInt()I
>>

scan_bool() ::= <<
invokevirtual java/util/Scanner/nextBoolean()Z
>>

scan_char() ::= <<
invokevirtual         java/util/Scanner/next()Ljava/lang/String;
iconst_0              
invokevirtual         java/lang/String/charAt(I)C
>>

read(var,scannertop) ::= <<
iconst_0
istore <var.varnum> ; <var.id>
aload <scannertop> ; scanner
invokevirtual java/util/Scanner/hasNext<type_scanner_map.(var.type)>()Z
ifeq L<var.label>
aload <scannertop> ; scanner
<(type_scan_templ.(var.type))()>
istore <var.varnum> ; <var.id>
L<var.label>:
>>



readMultiple(variables,localtop) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init>(Ljava/io/InputStream;)V
astore <localtop> ; scanner
<variables:read(localtop); separator="\n">
iload <first(variables).varnum> ; <first(variables).id>
>>